// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`health schema (0) match fails for invalid config -> empty: empty 1`] = `
"[2mexpect([22m[31mreceived[39m[2m).toMatchSchema([22m[32mschema[39m[2m)[22m

received
[31m  must have required property 'health'[39m
[31m    Path:     health.schema.json#/required[39m
[31m[39m"
`;

exports[`health schema (1) match fails for invalid config -> health is missing: health is missing 1`] = `
"[2mexpect([22m[31mreceived[39m[2m).toMatchSchema([22m[32mschema[39m[2m)[22m

received
[31m  must have required property 'health'[39m
[31m    Path:     health.schema.json#/required[39m
[31m[39m"
`;

exports[`health schema (2) match fails for invalid config -> health is not within enum: health is not within enum 1`] = `
"[2mexpect([22m[31mreceived[39m[2m).toMatchSchema([22m[32mschema[39m[2m)[22m

received
[31m  /health must be equal to one of the allowed values[39m
[31m    Expected: [\\"NORMAL_0\\",\\"FAILURE_1\\",\\"CHECK_FUNCTION_2\\",\\"OFF_SPEC_3\\",\\"MAINTENANCE_REQUIRED_4\\"][39m
[31m    Received: [33m<string>[39m[31m blub[39m
[31m    Path:     health.schema.jsonconstants/DeviceHealthEnumeration.schema.json/enum[39m
[31m[39m"
`;

exports[`health schema (3) match fails for invalid config -> health score is larger 100: health score is larger 100 1`] = `
"[2mexpect([22m[31mreceived[39m[2m).toMatchSchema([22m[32mschema[39m[2m)[22m

received
[31m  /healthScore must be <= 100[39m
[31m    Received: [33m<number>[39m[31m 101[39m
[31m    Path:     health.schema.json#/properties/healthScore/maximum[39m
[31m[39m"
`;

exports[`health schema (4) match fails for invalid config -> health score is negative: health score is negative 1`] = `
"[2mexpect([22m[31mreceived[39m[2m).toMatchSchema([22m[32mschema[39m[2m)[22m

received
[31m  /healthScore must be >= 0[39m
[31m    Received: [33m<number>[39m[31m -1[39m
[31m    Path:     health.schema.json#/properties/healthScore/minimum[39m
[31m[39m"
`;

exports[`health schema (5) match fails for invalid config -> swapped key and value: swapped key and value 1`] = `
"[2mexpect([22m[31mreceived[39m[2m).toMatchSchema([22m[32mschema[39m[2m)[22m

received
[31m  /health must be string[39m
[31m    Received: [33m<number>[39m[31m 0[39m
[31m    Path:     health.schema.jsonconstants/DeviceHealthEnumeration.schema.json/type[39m
[31m[39m[31m  /health must be equal to one of the allowed values[39m
[31m    Expected: [\\"NORMAL_0\\",\\"FAILURE_1\\",\\"CHECK_FUNCTION_2\\",\\"OFF_SPEC_3\\",\\"MAINTENANCE_REQUIRED_4\\"][39m
[31m    Received: [33m<number>[39m[31m 0[39m
[31m    Path:     health.schema.jsonconstants/DeviceHealthEnumeration.schema.json/enum[39m
[31m[39m[31m  /healthScore must be integer[39m
[31m    Received: [33m<string>[39m[31m CHECK_FUNCTION_2[39m
[31m    Path:     health.schema.json#/properties/healthScore/type[39m
[31m[39m"
`;
